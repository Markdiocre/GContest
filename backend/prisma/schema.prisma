// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum QuizType {
  PRIVATE
  PUBLIC
}

model User {
  id         BigInt   @id @default(autoincrement())
  first_name String
  last_name  String
  school     String?
  email      String   @unique
  password   String
  Answer     Answer[]
  Quiz       Quiz[]
  Token      Token?
  // answeredQuiz AnsweredQuiz[]
}

model Token {
  id      String @id @default(uuid())
  Users   User   @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId BigInt @unique
  token   String @default(uuid()) @unique
}

model Answer {
  id          String   @id @default(uuid())
  Quiz        Quiz     @relation(fields: [quizId], references: [id] ,onDelete: Cascade)
  quizId      String
  Question    Question @relation(fields: [questionId], references: [id] , onDelete: Cascade)
  questionId  String
  choice      Choice?  @relation(fields: [choiceId], references: [id] ,onDelete: Cascade)
  choiceId    String?
  Users       User     @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId     BigInt
  answered_at DateTime @default(now())
  // AnsweredQuiz   AnsweredQuiz? @relation(fields: [answeredQuizId], references: [id])
  // answeredQuizId String?
}

model Quiz {
  id         String     @id @default(uuid())
  title      String
  password   String?
  room       String?    @unique
  status     QuizType   @default(PUBLIC)
  creator    User       @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  creator_id BigInt
  created_at DateTime   @default(now())
  question   Question[]
  answer     Answer[]
  // totalScore AnsweredQuiz[]
}

// model AnsweredQuiz {
//   id         String   @id @default(uuid())
//   Score      Int
//   created_at DateTime @default(now())
//   Quiz       Quiz?    @relation(fields: [quizId], references: [id])
//   quizId     String?
//   answer     Answer[]
//   Users      Users?   @relation(fields: [usersId], references: [id])
//   usersId    String?
// }

model Question {
  id      String   @id @default(uuid())
  content String
  score   Int
  choice  Choice[]
  answer  Answer[]
  Quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId  String
}

model Choice {
  id         String    @id @default(uuid())
  content    String
  is_correct Boolean
  answer     Answer[]
  Question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String?
}
